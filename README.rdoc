= FingerText (current version 0.5.7)

Tab triggered snippet plugin for Notepad++.

== Description

FingerText is a tab triggered snippet plugin for Notepad++. Support multiple hotspots simultaneous editing, nested hotspots, dynamic hotspots(a lot more than just plain text, you can run commands, or trigger another snippet in your snippets), hotspot text hint(instead of just a $ or # sign) and hotspot default value. It also features a SnippetDock which shows a list of currently available snippets. (see screenshots) You can import or export your snippets and share it to others.

If you are new to FingerText, follow the section "Install", "Importing Sample Snippets" and "Basic Usage" in this file. That should give you a step by step tutorial on how to use FingerText.

== Development Status

This plugin is still in Alpha stage so do expect that it can be buggy. However, things are getting more and more stable now so I am listing out the stability of different parts of the program instead of just saying that "everything can be changed in future releases". Please scroll down to the section "Snippet Syntax and Program Structure Stability" for more details.

== Install

Download the file "FingerText - 0.5.7.zip" at
http://sourceforge.net/projects/fingertext/files/Alpha%20Releases/FingerText%20-%200.5.7.zip/download

Unzip the package and copy the FingerText.dll to the plugins folder of Notepad++. This is the only file you need to run FingerText in notepad++.

The readme.rdoc file is for your reference. And the FingerText0.5.7SampleSnippets.ftd is a file containing some sample snippets. (You need this if you want to follow the usage guide in this document)

== Screenshots

Screenshots are available here:

https://github.com/downloads/erinata/FingerText/FingerText0.5.4_ScreenClip_1.png

https://github.com/downloads/erinata/FingerText/FingerText0.5.4_ScreenClip_3.png

https://github.com/downloads/erinata/FingerText/FingerText0.5.4_ScreenClip_4.png

== Importing Sample Snippets

You should have FingerText installed. If you are in doubt, go to the notepad++ menu, there should be "FingerText" under "Plugins".

To import the sample snippets, go to notepad++ menu > plugin > FingerText > Import Snippets. Choose the file FingerText0.5.7SampleSnippets.ftd (which is the file you downloaded with the FingerText.dll) and all the sample snippets will be installed.

If you are using plugin Manager to download FingerText or you just cannot locate the sample snippet file, you can download it from https://github.com/downloads/erinata/FingerText/FingerText0.5.7SampleSnippets.ftd

To verify you have imported the snippets correctly, go to notepad++ menu > Plugins > FingerText > Show SnippetDock. A Dialog with a list of available snippets should show up.

== Basic Usage

Here I assume the you have already install FingerText and imported the sample snippets. If you are not, please refer to previous sections.

Open a new file in notepad++ and go to notepad++ menu > Plugins > FingerText > Show SnippetDock. A Dialog with a list of available plugins should show up. Here you can see a list of available snippets. There is one of them called "<GLOBAL> num". "num" is the trigger text of the snippet. To trigger it, type in "num" (without quotes) and hit the [Tab] key.

  num[Tab]

The trigger text disappear and it is replaced by a bunch of numbers.

  1234567890
  0987654321
  1234567890
  0987654321

That's it. You can try triggering others snippets in the list. Snippet can be as long as several paragraphs (try "lorem"). Or as short as just one word (try "npp")

  lorem[Tab]
  npp[Tab]

You probably have already noticed, as you type, the SnippetDock is updated. When you type "lor"(without quotes), FingerText will show on the Dock that there is a snippet "lorem", in case you forget how to spell it.

How about if you do not want to type the whole word? just type "lor" and go to Menu>Plugins>FingerText>Tag completion. The word lorem is completed and you can trigger the snippet by hitting [tab]. Assign the Tag completion to a hot key if you plan you use it frequently.

You can trigger snippets anywhere in your document. the snippet will be inserted to the location where you type in the trigger text.

== Snippet Scope

Some snippets are file specific. Try to open a new file and save it as "test.cpp".

Notice that the SnippetDock is updated. There are a bunch of snippets added to the list. One of them is called "<.cpp> ios". Try triggering it inside the test.cpp.

  ios[Tab]
  
The snippet is triggered and a bunch of code is inserted. This snippet is only available when your file has extension ".cpp". But you can still trigger the global snippets. (Try "num" in the test.cpp file)

As you may notice, <GLOBAL> indicates that the snippet is available anywhere, while <.cpp> snippets are only for .cpp files. The SnippetDock automatically updates the available snippets for your reference. The text box on the top of the SnippetDock will show a preview of the snippet that is currently selected.

Apart from global and extension, there are some snippets which are Filename specific. You can try open a new file in notepad++ and save it as "Makefile" (with no extension and capital M). The SnippetDock will shows that there are some more snippets available for Makefile. (Try "simple")

== Hotspots Navigation

Some snippets contain hotspots. For example, open a new file and trigger the snippet "mit". 

  mit[tab]

A sample of MIT license will appear in the editor. Notice that your caret is automatically moved to the "year" spot. Now type in 2011 and hit [Tab] again. The caret is now on the name spot and you can enter your name. Hit [Tab] after you enter you name will bring the caret to the end of the text. This is a very convenient way to fill in information while the snippet acts as a template file.

Some of the snippets contain multiple hotspots with the same name. For example you can trigger the snippet "awesome". Your cursor is on all three spots and anything you type will change all of them simultaneously. You can also try the snippet "for" in a .cpp file. Trigger the snippet and press the letter "i" once to change all the iteration variable to "i".

To see feature this in action, open a .cpp file and trigger the snippet "template". Use [tab] to navigate to each part and fill in the details. Now you have a working framework for your cpp main program. (Also see the snippet "simple" in Makefile)

== Creating and Editing Snippets

To create new snippets, the easiest way is to select some text in your document, and go to menu>Plugins>FingerText>Create snippet from selection. The Snippet editor shows up and you can edit the TriggerText and Scope. Click the save button when you finish editing, or you can use the shortkey Ctrl+S.

Alternatively, you can click the create button at the SnippetDock. The snippet editor shows up and you can edit the Trigger Text, Scope and you can enter your snippet content. REMEMBER to place a [>END<] at the end of the snippet. Click the save button when you finish editing, or you can use the shortkey Ctrl+S.

To edit a snippet, select the snippet on the snippet list and click the edit button. You can also double click on the list to edit a particular snippet. Click the save button when you finish editing.

Be careful not to mess up the template when you are editing or creating snippets. If you are in doubt, you can always press the "create" button to get a fresh correct template.

Deleting a snippet is easy, just select the snippet and click the delete button.

== Basic Hotspots Editing

Other than plain text, you can put one or more Hotspots in you snippet.

Hotspots are indicated by $[![Whatever name]!]. The "Whatever name" can be a hint of the hotspot, or you can fill it with a default value. (If you type nothing and just hit tab, the hotspot $[![Whatever name]!] will be substituted by the string "Whatever name"(without quotes)). You may want to add a empty Hotspot (i.e. $[![]!]) at the location where you want the cursor to move to after tabbing through the last hotspot. Try to edit the sample snippets and use them as reference. 

Notice that hotspots with the same name will be highlighted at the same time. Try editing the snippet "for" which you have triggered in previous section. You can see that there are a bunch of $[![(var)]!], which will be highlighted simultaneously when the snippet is triggered.

Anything after [>END<] will not be inserted into the document so you can write comment about the snippet there.

Chinese characters are supported. You can try it by triggering the snippet "chinese". All snippets should be encoded in UTF-8 and being triggered in UTF-8 document. Notice that Chinese character tag names are not supported. Actually sometimes it works sometimes it doesn't so it is not officially supported. 

== Dynamic Hotspots
FingerText support dynamic hotspots. Currently, there are three kinds of dynamic hotspots.

- Chain - This is indicated by $[![(cha)somesnippet]!]. When the snippet is triggered, this hotspot is replaced by the text generated from activating another snippet "somesnippet". You can trigger the snippet "chain" to see how it works

- Keyword - This is indicated by $[![(key)XXXXX]!]. And XXXXX is some predefined keyword. Currently the supported keywords are DATESHORT, DATELONG, TIMESHORT, TIMELONG, FILENAME, EXTNAME, DIRECTORY and PASTE. All of them are self-explaining (like DATESHORT will insert the current date in short format). And among them the most important one is PASTE. If your snippet contain $[![(key)PASTE]!], it will be replaced by whatever text in the clipboard. This is very useful in tag languages or snippets that turn a bunch of code into a function. To see this in action, copy a line of code and trigger the snippet "method". The code that you copied will be turned into a ruby method.

- Command - This is indicated by $[![(cmd)XXXXX]!]. And XXXXX is some command that you can run in the console. For example $[![(cmd)dir]!] will fill your hotspot with the output that you would see when you run dir in console. Of course you can run a batch file if you want. Try snippet "cmddir" and "cmdbat" to see it in action.

More dynmaic snippet types are coming.

== Snippets Backup and Sharing

To backup the snippets, you can go to notepad++ menu > Plugins > FingerText > Export Snippets. Choose a file name (which extension .ftd) and the snippets are exported. You can import them in the same way as importing the sample snippets.

The .ftd files are in plain text so you can edit them directly too. But don't do that unless you know what you are doing because this can cause serious problem in importing and exporting. Editing .ftd files is not officially supported. If you use sqlite, you can directly edit the snippet database too. It is not officially supported neither.

== Snippet Syntax and Program Structure Stability
- snippet triggering (stable) - snippets are default to be triggered by tab. You can change it to the hotkey you like but I assume that you are using the default hotkey
- static hotspots (stable) - static hotspots are indicated by $[![XXXXX]!] where XXXXX is the default value of the hotspots. This won't be changed unless serious compatibility issues happen.
- dynamic hotspots (not stable) - currently there are 3 kinds of dynamic hotspots, chain, keyword and command. They are indicated by $[![(cha)XXXXX]!], $[![(key)XXXXX]!] and $[![(cmd)XXXXX]!] respectively. I am still experimenting what's the best way to do it so do expect changes in future releases.
- Folder Structure (stable) - the FingerText.ini and FingerText.db3 file are staying in config/FingerText folder.
- Database Structure (not stable) - the structure of FingerText.db3 is nore stable yet but the user is not supposed to edit the database file directly

== Upgrading from 0.5.0 or above

Everything is compatible.

== Upgrading from 0.4.15 or 0.4.16

If you want to use your snippets after you upgrade to 0.5.4, you can go to the config folder and move the FingerText.db3 file to the config\FingerText folder after update.

chain snippet is indicated by $[![(cha)]!] instead of $[![(chain)]!] 

== Upgrading from 0.4.4 or 0.4.11

If you want to use your snippets after you upgrade to 0.5.4, you can go to the config folder and move the FingerText.db3 file to the config\FingerText folder after update.

== Upgrading from 0.4.1

If you want to use your snippets after you upgrade to 0.5.4, you can go to the %Notepad++ folder%\plugins\FingerText and get the old database file Snippets.db3. Rename is to FingerText.db3 and move it to the config\FingerText folder after update.

== Upgrading from 0.3.5 or below

FingerText 0.3.5 or below use a "one snippet per file" system to store snippets, which is not compatibile with current version. If you really have a lot of snippets created using these early version, please send your snippet to erinata@gmail.com. I will try my best to import them into the database in the current version.

== Change log 
(for the detail change log (including the development log) please refer to the CHANGELOG file in the repository)
0.5.7
performance improvement for live update snippet hint
fixed: Annotation not shown correctly in editmode
update quick guide
Other small typos fixed

0.5.6
- Added: You can trigger snippets in editor mode (but you cannot navigate to hotspots in editor mode as it will disturb snippet editing)
- commands that insert dynamic hotspots are removed (you can make a snippet for that instead)
- Fixed: snippet editor annotation infinite loop bug
- Fixed: snippet editor annotation appear in normal mode by accident
- performance improvement in dynamic hotspot triggering (especially for keyword hotspots)

0.5.4
- The create button will create snippet using selection if selection is not empty.
- Multi pasting work for simultaneous hotspots
- Nested (normal) hotspots
- Empty hotspots are independent of each others.
- Fixed: Snippetdock not updating when save a file with another extension name
- Fixed: Autoscrolling when switch between file
- Fixed: a bug causing hotspot with the same name not triggering correctly
- Fixed: Edit view not activa te correctly when the screen is splitted
- More reliable edit mode

0.5.0
- Added command for inserting different kinds of hotspots
- Added command to create snippet from selection
- Added command to change settings in config.ini
- SnippetDock items are lining up better
- Group config and database files into a FingerText folder under config folder

0.4.16
- This is primary a bug fixing version
- chain snippet is indicated by $[![(cha)]!] instead of $[![(chain)]!] so that different hotspots can line up better.
- Fixed error when saving file in ProgramFile folders without Admin right
- Fixed tag completion not updating SnippetDock hint
- Fixed infinite recusion bug in keyword and command hotspot
- performance improvment in live search

0.4.15
- Add Dynamic Hotspots. Currently there are 3 types of dynamic hotspots (chain) (key) (cmd). More is coming.
- Added Tag completion command
- Added indentation reference
- Added Live update SnippetDock
- Fixed heap corruption bug in edit snippet, getcurrenttag and hotspotnavigation
- Fixed snippetdock toggle bug
- Fixed incompatibility with tab autocompletion

0.4.11
- Snippets TriggerText and Scope are NOT case sensitive now. Extension .c and .C are viewed as the same extension,and TriggerText "NpP" is the same as "nPp"
- Totally new snippet editing view with more wrong format checking
- Change double click behaviour in SnippetDock. It trigger editview instead of inserting snippets.
- Use ctrl-S to save snippet while in editing view
- Added an "About" and "Quick Guide" command in menu
- Added a command to temporarily enable or disable fingertext
- Added a command to toggle show/Hide SnippetDock
- Added a snippet Preview Box (chinese snippet text not supported)
- Snippets function are disabled when you are editing snippets
- All snippets are shown in SnippetDock when editing snippets
- Remove the list length text box, use ini config file to configure snippet list maximum length (more configuration coming)
- Fixed problem of extra endline during repeated exporting and importing
- save button disabled when the editor is not editing snippet
- More instructions on the snippetdock
- More messages for snippet saving and importing
- Fixed problem of not opening the correct snippet in editor
- Tons of other bugs fixed

0.4.4
- Implemented Snippets import and export function. Change the database storage location to the config folder. (Should solve the problem of snippet not saving correctly under Windows 7 and Vista)
- A better step by step tutorial for people who are new to snippets

0.4.1
- Fixing the version number problem of 0.4.0

0.4.0
- First stable version using sqlite3. 

0.3.11
- Using Sqlite to store snippets instead of using recusive file system.
- Add Snippet Dock, which shows all available snippets according to the curent file.
- Implemented Create Edit and Delete from the snippet dock.
- Impletmented Double Click insert snippet function.

0.3.2
- Last stable version using the recusive file system to store snippets. All the snippets create under this version will not work in version later than FingerText - 0.3.5

0.2.6
- Multiple hotspots selection and hotspot hint text replacement works simultaneously

0.1.0 
- First Alpha verison. Implemented basic tab trigger snippets and hotspots navigation

== Tested with

- Notepad++ 3.8.7(Unicode), Windows 7 Ultimate 64bit 
- Notepad++ 3.8.6(Unicode), Windows 7 Ultimate 64bit 

== Credits

Many thanks to..........
- Don Ho for making Notepad++ and providing a flexible and well documented api for plugin programming. 
- Dave Brotherstone for his helpful comments and programmming help (especially for the sqlite support fork). 
- Tsz Kin Chan for his suggestions on the UI.   
- bbluemel for testing and suggesting solution for the indent reference function.
- Also thanks for all the other comments from sourceforge forum.

== License

This plugin is built using the NppPluginTemplate provided by Don Ho. The license of the template is included in the source.

The plugin is released under MIT license.

MIT license

Copyright (C) 2011 by Tom Lam

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.